# Default platform uses the native SDK.
# To build for Mac OS X using internal SDK, use 'make PLATFORM=macosx <target>'
# To build for iOS, use 'make PLATFORM=iphoneos <target>'

WIFI_FRAMEWORK=-framework CoreWLAN
ifeq ($(PLATFORM),iphoneos)
# iOS internal SDK
CORETELEPHONY=-framework CoreTelephony
ARCHS=arm64 arm64e
WIFI_FRAMEWORK=-framework MobileWiFi 
endif

ifeq ($(PLATFORM),macosx)
# Mac OS X internal SDK
ARCHS=x86_64 arm64e
CORETELEPHONY=
endif

ifeq ($(PLATFORM),watchos)
# watchOS internal SDK
CORETELEPHONY=-framework CoreTelephony
ARCHS=arm64_32
WIFI_FRAMEWORK=-framework MobileWiFi 
endif

ifeq ($(PLATFORM),)
# Mac OS X native SDK
ARCHS=x86_64
CORETELEPHONY=
CC = cc
SYSROOT = /
else
# Mac OS X or iOS internal SDK
SDK=$(PLATFORM).internal
SYSROOT=$(shell xcodebuild -version -sdk $(SDK) Path)
CC = xcrun -sdk $(SDK) cc
endif

PF_INC = -F$(SYSROOT)/System/Library/PrivateFrameworks
ARCH_FLAGS=$(foreach a,$(ARCHS),-arch $(a))
SCPRIV=-DUSE_SYSTEMCONFIGURATION_PRIVATE_HEADERS

SYSPRIV=-I$(SYSROOT)/System/Library/Frameworks/System.framework/PrivateHeaders
SC_INCLUDE=-I. -I../IPMonitorControl -I./helper -I../Plugins/common

SCNETWORKINTERFACE_TEST_CFILES = SCNetworkInterface.c ../IPMonitorControl/IPMonitorControl.c VLANConfiguration.c BridgeConfiguration.c SCNetworkConfigurationInternal.c SCNetworkService.c SCNetworkProtocol.c LinkConfiguration.c

ifeq ($(PLATFORM),macosx)
SCNETWORKINTERFACE_TEST_CFILES += BondConfiguration.c
endif

scnetworkinterface: $(SCNETWORKINTERFACE_TEST_CFILES)
	$(CC) -DTEST_SCNETWORKINTERFACE -isysroot $(SYSROOT) $(ARCH_FLAGS) $(SYSPRIV) $(SC_INCLUDE) -framework Foundation -framework SystemConfiguration -framework IOKit $(PF_INC) -lCrashReporterClient -Wall -g -o $@ $^
	codesign -s - $@
